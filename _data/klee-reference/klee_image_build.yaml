command: klee image build
deprecated: false
examples: '### Build with PATH


  ```console

  $ klee image build .

  Started to build image with ID f7b6cc114e75

  Step 1/3 : FROM FreeBSD13.2-STABLE:latest

  Step 2/3 : RUN ls -lh /

  total 72

  -rw-r--r--   2 root  wheel   1.0K May 12  2022 .cshrc

  -rw-r--r--   2 root  wheel   507B May 12  2022 .profile

  -r--r--r--   1 root  wheel   6.0K May 12  2022 COPYRIGHT

  drwxr-xr-x   2 root  wheel    46B May 12  2022 bin

  drwxr-xr-x  14 root  wheel    65B May 12  2022 boot

  dr-xr-xr-x   7 root  wheel   512B Nov  6 18:40 dev

  drwxr-xr-x  28 root  wheel   104B May 12  2022 etc

  drwxr-xr-x   5 root  wheel    67B May 12  2022 lib

  drwxr-xr-x   3 root  wheel     5B May 12  2022 libexec

  drwxr-xr-x   2 root  wheel     2B May 12  2022 media

  drwxr-xr-x   2 root  wheel     2B May 12  2022 mnt

  drwxr-xr-x   2 root  wheel     2B May 12  2022 net

  dr-xr-xr-x   2 root  wheel     2B May 12  2022 proc

  drwxr-xr-x   2 root  wheel   150B May 12  2022 rescue

  drwxr-x---   2 root  wheel     7B May 12  2022 root

  drwxr-xr-x   2 root  wheel   149B May 12  2022 sbin

  lrwxr-xr-x   1 root  wheel    11B May 12  2022 sys -> usr/src/sys

  drwxrwxrwt   2 root  wheel     2B May 12  2022 tmp

  drwxr-xr-x  14 root  wheel    14B May 12  2022 usr

  drwxr-xr-x  24 root  wheel    24B May 12  2022 var

  --> Snapshot created: @7cb0ccbebd9d

  Step 3/3 : CMD echo "Hello World"


  image created

  f7b6cc114e75

  ```


  This example specifies that the `PATH` is `.`, and so Klee will resolve this to
  an

  absolute path and send it to Kleened. The `PATH` specifies

  where to find the files for the "context" of the build on Kleened.

  If Klee is used on the same machine as Kleened, the resolved absolute `PATH` will

  be the same for Klee and Kleened. If not, remember to specify the correct path

  on the remote machine where Kleened is running.


  ### Tag an image (-t, --tag)


  ```console

  $ klee image build -t nginx:1.24.0_13 .

  ```


  This will build like the previous example, but it will then tag the resulting

  image `nginx:1.24.0_13`.


  ### Specify a Dockerfile (-f, --file)


  ```console

  $ klee image build -f Dockerfile.debug .

  ```


  This will use a file called `Dockerfile.debug` for the build instructions

  instead of `Dockerfile`.


  ```console

  $ klee image build -f dockerfiles/Dockerfile.debug -t myapp_debug .

  $ klee image build -f dockerfiles/Dockerfile.prod  -t myapp_prod .

  ```


  The previous commands will build the current build context (as specified by the

  `.`) twice, once using a debug version of a `Dockerfile` and once using a

  production version.


  ### Set build-time variables (--build-arg)


  You can use `ENV` instructions in a Dockerfile to define variable

  values. These values persist in the built image. However, often

  persistence is not what you want. Users want to specify variables differently

  depending on which host they build an image on.


  A good example is `HTTP_PROXY` for pulling intermediate files.

  The `ARG` instruction lets Dockerfile authors define values that users

  can set at build-time using the  `--build-arg` flag:


  ```console

  $ klee image build --build-arg HTTP_PROXY=http://10.20.30.2:1234 .

  ```


  This flag allows you to pass the build-time variables that are

  accessed like regular environment variables in the `RUN` instruction of the

  Dockerfile. Also, these values don''t persist in the intermediate or final images

  like `ENV` values do. You must add `--build-arg` for each build argument.


  Using this flag will not alter the output you see when the `ARG` lines from the

  Dockerfile are echoed during the build process.


  For detailed information on using `ARG` and `ENV` instructions, see the

  [Dockerfile reference](/reference/dockerfile).

  '
experimental: false
experimentalcli: false
long: "The `klee image build` command builds images from a Dockerfile and a\n\"context\"\
  . A build's context is the set of files and directories located in\nthe specified\
  \ `PATH`. The build process can refer to any of the files in the\ncontext. For example,\
  \ your build can use a [*COPY*](/reference/dockerfile/#copy)\ninstruction to copy\
  \ a file from the context path into the build container.\n\nNote that `PATH` refers\
  \ to a location in the filesystem on the host where Kleened\nis running. If you\
  \ do not run `klee` on the host, it might be desirable to access\nthe context `PATH`\
  \ using NFS, SSHFS or something similar.\n\nBy default the `klee image build` command\
  \ will look for a `Dockerfile` at the root\nof the build context (i.e., at `PATH`).\
  \ The `-f`, `--file`, option lets you\nspecify the path to an alternative file to\
  \ use instead.\nThis is useful in cases where the same set of files are used for\
  \ multiple builds.\nthe context. The path is interpreted relative to the context\
  \ `PATH`.\n\nIn most cases, it's best to put each Dockerfile in an empty directory.\
  \ Then,\nadd to that directory only the files needed for building the Dockerfile.\n\
  \n### Build container configuration\n\nJust like you can configure the container\
  \ environment with networking,\njail-parameters and mounts you can configure the\
  \ build container used when\ncreating images. The parameters used to configure the\
  \ build container is\nmostly identical to parameters used for `klee run`. A few\
  \ differences to keep in\nmind, however:\n\n- `--from`: Override the image in the\
  \ `FROM`-instruction.\n- `--user`: If it is not set, the user of the build container\
  \ will be inherited\n  from the parent image. `USER`-instructions overrides this\
  \ parameter.\n- `--env`: `ENV`-instructions override the values of this parameter.\n\
  - `--jailparam`: `USER`-instructions can be affected if the\n  `exec.system_user`/`exec.jail_user`/`exec.system_jail_user`\
  \ jail parameters\n  are manually set.\n"
options:
- deprecated: false
  description: 'Default user used when running commands in the container.

    This parameter will be overwritten by the jail parameter `exec.jail_user` if it
    is set.'
  experimental: false
  experimentalcli: false
  option: user
  shorthand: u
  value_type: text
- deprecated: false
  description: Set environment variables (e.g. --env FIRST=SomeValue --env SECOND=AnotherValue)
  experimental: false
  experimentalcli: false
  option: env
  shorthand: e
- deprecated: false
  description: 'Mount a volume/directory/file on the host filesystem into the container.

    Mounts are specfied using a `--mount SOURCE:DESTINATION[:rw|ro]` syntax.'
  experimental: false
  experimentalcli: false
  option: mount
  shorthand: m
  value_type: list
- deprecated: false
  description: 'Specify one or more jail parameters to use.

    If you do not want `mount.devfs`, `exec.clean`, and `exec.stop="/bin/sh /etc/rc.shutdown"`
    enabled, you must actively disable them.'
  experimental: false
  experimentalcli: false
  option: jailparam
  shorthand: J
- deprecated: false
  description: 'Network driver of the container.

    Possible values: `ipnet`, `host`, `vnet`, and `disabled`. If no network and no
    network driver is supplied,

    the network driver is set to `host`. If a network is specfied but no network driver,
    it is set to `ipnet`,'
  experimental: false
  experimentalcli: false
  option: driver
  shorthand: l
- deprecated: false
  description: Connect container to this network.
  experimental: false
  experimentalcli: false
  option: network
  shorthand: n
- deprecated: false
  description: IPv4 address used for the container. If omitted, an unused ip is allocated
    from the IPv4 subnet of `--network`.
  experimental: false
  experimentalcli: false
  option: ip
- deprecated: false
  description: IPv6 address used for the container. If omitted, an unused ip is allocated
    from the IPv6 subnet of `--network`.
  experimental: false
  experimentalcli: false
  option: ip6
- deprecated: false
  description: Specify an image that will override the image in the Dockerfile's `FROM`
    instruction.
  experimental: false
  experimentalcli: false
  option: from
- deprecated: false
  description: 'Location of the `Dockerfile` relative to **PATH**.  [default: Dockerfile]'
  experimental: false
  experimentalcli: false
  option: file
  shorthand: f
- deprecated: false
  description: Name and optionally a tag in the `name:tag` format
  experimental: false
  experimentalcli: false
  option: tag
  shorthand: t
- deprecated: false
  description: Suppress the build output and print image ID on success
  experimental: false
  experimentalcli: false
  option: quiet
  shorthand: q
- deprecated: false
  description: Whether or not to remove the image if the build fails
  experimental: false
  experimentalcli: false
  option: rm
- deprecated: false
  description: Set build-time variables (e.g. --build-arg FIRST=hello --build-arg
    SECOND=world)
  experimental: false
  experimentalcli: false
  option: build-arg
- deprecated: false
  description: Show this message and exit.
  experimental: false
  experimentalcli: false
  option: help
plink: klee_image.yaml
pname: klee image
short: Build a new image
usage: klee image build [OPTIONS] PATH
