command: klee container create
deprecated: false
examples: "\nMore examples available at the [`klee container run` command](container_run.md)\
  \ documentation.\n\n### Create and start a container\n\nThe following example creates\
  \ an interactive container with a pseudo-TTY attached,\nthen starts the container\
  \ and attaches to it:\n\n```console\n$ klee container create --name mycontainer\
  \ hello-world:latest\n4d9d4e72a07f\n\n$ klee container start -it mycontainer\ncreated\
  \ execution instance 71c359af03f7\nHello World\n\nexecutable 71c359af03f7 and its\
  \ container exited with exit-code 0\n```\n\nThe above is the equivalent of a `klee\
  \ run`:\n\n```console\n$ klee container run -it --name mycontainer hello-world:latest\n\
  6e33dbacde70\ncreated execution instance 4eb13ad4c3a4\nHello World\n\nexecutable\
  \ 4eb13ad4c3a4 and its container exited with exit-code 0\n```\n\n### Initialize\
  \ volumes\n\nContainer volumes can be automatically created during the `klee container\
  \ create`\nphase (and `klee container run` too):\n\n```console\n$ klee container\
  \ create -v /data --name storage FreeBSD13.2-STABLE\n5f8e437e5c95\n\n$ klee volume\
  \ ls\n VOLUME NAME    CREATED\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\
  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\n 6dedc1df7b42   10 secondsago\n```\n"
experimental: false
experimentalcli: false
long: "The `klee container create` (or shorthand: `klee create`) command creates a\n\
  new container from the specified image, without starting it.\n\nThis command is\
  \ useful when you want to set up a container configuration ahead of time\nso that\
  \ it is ready to start when you need it.\n\nWhen creating a container, Kleened creates\
  \ a ZFS dataset based\non the image and prepares it for running the specified command.\n\
  If no command is specified, Kleened uses the `CMD` specified in the image.\nThe\
  \ container ID is then printed to `STDOUT`.\n\n### Specifying IMAGE\nThe `IMAGE`\
  \ argument takes the following two forms:\n\n- `<image_id>[@<snapshot_id>]`\n- `<image_name>[:<tag>][@<snapshot_id>]`\n\
  \nIf `<tag>` is omitted `latest` is assumed. For example,\n\n- `FreeBSD` means the\
  \ image `FreeBSD` with tag `latest`\n- `FreeBSD:13.2-STABLE` means the image `FreeBSD`\
  \ with tag `13.2-STABLE`\n- `FreeBSD:base@6b3c821605d4` means the `FreeBSD:base`\
  \ image but create the container from the snapshot `6b3c821605d4`\n- `48fa55889b0f`\
  \ use the image having ID `48fa55889b0f`\n- `48fa55889b0f@2028818d6f06` use the\
  \ image as above but create the container from the snapshot `2028818d6f06`\n\nFor\
  \ more information about snapshots see the [Build snapshots](/build/building/snapshots/)\
  \ section.\n\n### Specifying mounts\nWhen creating containers it is also possible\
  \ to mount volumes/directories/files\ninto the container using one or more `--mount/-m\
  \  <mount>` flags. `<mount>` must use\nthe following syntax:\n\n```console\nSOURCE:DESTINATION[:rw|ro]\n\
  ```\n\nwhere\n\n- `SOURCE` can be either a volume name or an absolute path on the\
  \ host system.\n  If `SOURCE` starts with '`/`' it is interpreted as a host path.\n\
  \  If a volume name is specified, and the volume does not exist, it will be created.\n\
  - `DESTINATION` is the path of the mount within the container. If it does not exist\
  \ it\n  will be created.\n- Optionally, if the mount is postfixed with `:ro` or\
  \ `:rw` the mount will be read-only\n  or read-write, respectively. If omitted,\
  \ `:rw` is assumed.\n\nFor example:\n\n- `klee container create -m logs:/var/log\
  \ ...` mount a volume named `logs` into the container at `/var/log`.\n- `klee container\
  \ create -m my_archive:/archive:ro ...` create a read-only `archive` mountpoint\
  \ in the\n  container root for the `my_archive` volume.\n- `klee container create\
  \ -m /home/some_user:/home/some_user ...` mount the host directory `/home/some_user`\n\
  \  into the same path within the container.\n\n### Starting the container\nYou can\
  \ then use the `klee container start`\n(or shorthand: `klee start`) command to start\
  \ the container at any point.\nCombinining `klee container create` and `klee container\
  \ start` is equivalent to\n`klee container run`.\n\nThe `klee create` command shares\
  \ most of its options with the `klee run`\ncommand. Refer to the [`klee container\
  \ run` command](container_run.md) section\nfor details on the available flags and\
  \ options.\n"
options:
- deprecated: false
  description: 'Default user used when running the container.

    This parameter will be overwritten by the jail parameter `exec.jail_user` if it
    is set.'
  experimental: false
  experimentalcli: false
  option: user
  shorthand: u
  value_type: text
- deprecated: false
  description: Set environment variables (e.g. --env FIRST=SomeValue --env SECOND=AnotherValue)
  experimental: false
  experimentalcli: false
  option: env
  shorthand: e
- deprecated: false
  description: 'Mount a volume/directory/file on the host filesystem into the container.

    Mounts are specfied using a `--mount <source>:<destination>[:rw|ro]` syntax.'
  experimental: false
  experimentalcli: false
  option: mount
  shorthand: m
  value_type: list
- deprecated: false
  description: 'Specify one or more jail parameters to use. See the `jail(8)` man-page
    for details.

    If you do not want `exec.clean` and `mount.devfs` enabled, you must actively disable
    them.  [default: mount.devfs, exec.stop="/bin/sh /etc/rc.shutdown jail"]'
  experimental: false
  experimentalcli: false
  option: jailparam
  shorthand: J
- deprecated: false
  description: 'Network driver of the container.

    Possible values: `ipnet`, `host`, `vnet`, and `disabled`. If no network and no
    network driver is supplied,

    the network driver is set to `host`. If a network is specfied but no network driver,
    it is set to `ipnet`,'
  experimental: false
  experimentalcli: false
  option: driver
  shorthand: l
- deprecated: false
  description: Connect container to this network.
  experimental: false
  experimentalcli: false
  option: network
  shorthand: n
- deprecated: false
  description: IPv4 address used for the container. If omitted, an unused ip is allocated
    from the IPv4 subnet of `--network`.
  experimental: false
  experimentalcli: false
  option: ip
- deprecated: false
  description: IPv6 address used for the container. If omitted, an unused ip is allocated
    from the IPv6 subnet of `--network`.
  experimental: false
  experimentalcli: false
  option: ip6
- deprecated: false
  description: Assign a name to the container
  experimental: false
  experimentalcli: false
  option: name
- deprecated: false
  description: 'Publish one or more ports using the syntax `<HOST-PORT>[:CONTAINER-PORT][/<PROTOCOL>]`
    or

    `<INTERFACE>:<HOST-PORT>:<CONTAINER-PORT>[/<PROTOCOL>]`.

    `CONTAINER-PORT` defaults to `HOST-PORT` and `PROTOCOL` defaults to ''tcp''.'
  experimental: false
  experimentalcli: false
  option: publish
  shorthand: p
- deprecated: false
  description: Show this message and exit.
  experimental: false
  experimentalcli: false
  option: help
plink: klee_container.yaml
pname: klee container
short: Create a new container.
usage: klee container create [OPTIONS] IMAGE [COMMAND]...
